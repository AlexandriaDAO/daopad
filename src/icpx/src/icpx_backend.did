type BurnError = variant {
  CalculationError : record { reason : text };
  AmountBelowMinimum : record { minimum : text; amount : text };
  FeeCollectionFailed : record { reason : text };
  TransferFailed : record { token : text; reason : text };
  NoRedemptionsPossible : record { reason : text };
};
type BurnResult = record {
  icpx_burned : nat;
  timestamp : nat64;
  successful_transfers : vec TransferRecord;
  failed_transfers : vec FailedTransfer;
};
type FailedTransfer = record { token : Token; error : text; amount : nat };
type HealthStatus = record {
  cycles_balance : nat;
  memory_used : nat64;
  canister_id : principal;
  is_paused : bool;
  timestamp : nat64;
};
type IcpxError = variant {
  System : SystemError;
  Burn : BurnError;
  Mint : MintError;
  Rebalance : RebalanceError;
  Trading : TradingError;
  Other : text;
  Validation : ValidationError;
  Query : QueryError;
};
type MintError = variant {
  CalculationError : record { reason : text };
  AmountBelowMinimum : record { minimum : text; amount : text };
  SnapshotFailed : record { reason : text };
  LedgerMintFailed : record { reason : text };
  InvalidMintId : record { id : text };
  MintNotPending : record { id : text; status : text };
  DepositCollectionFailed : record { reason : text };
  FeeCollectionFailed : record { reason : text };
  MintTimeout : record { mint_id : text };
  RefundFailed : record { reason : text };
};
type PortfolioBreakdown = record {
  token_values : vec record { Token; TokenValue };
  timestamp : nat64;
  total_value_ckusdt : nat;
};
type PortfolioDisplay = record {
  last_rebalance : opt nat64;
  targets : vec record { Token; float64 };
  deviations : vec record { Token; float64 };
  supply : nat;
  timestamp : nat64;
  total_value_usd : float64;
  positions : vec Position;
};
type Position = record {
  token : Token;
  balance : nat;
  value_usd : float64;
  price_usd : float64;
};
type QueryError = variant {
  InvalidResponse : record { reason : text };
  CanisterUnreachable : record { canister : text };
  RateLimited;
  Timeout;
};
type RebalanceError = variant {
  TooSoonSinceLastRebalance : record { interval : nat64; last : nat64 };
  InsufficientBalance : record {
    token : text;
    needed : text;
    available : text;
  };
  NoRebalanceNeeded;
  TradeFailed : record { reason : text };
  SlippageExceeded : record { max : text; expected : text };
};
type Result = variant { Ok : BurnResult; Err : IcpxError };
type Result_1 = variant { Ok : nat; Err : IcpxError };
type Result_2 = variant { Ok : PortfolioBreakdown; Err : IcpxError };
type Result_3 = variant { Ok : vec record { text; float64 }; Err : IcpxError };
type Result_4 = variant { Ok : text; Err : IcpxError };
type Result_5 = variant { Ok; Err : IcpxError };
type SystemError = variant {
  StorageFull;
  TimerFailed : record { reason : text };
  CyclesInsufficient;
  Unauthorized : record { "principal" : text };
  StateCorrupted : record { reason : text };
};
type Token = variant { BOB; ALEX; KONG; ZERO; CkUSDT };
type TokenValue = record {
  balance : nat;
  value_ckusdt : nat;
  price_usd : float64;
};
type TradingError = variant {
  ApprovalFailed : record { reason : text };
  SwapFailed : record { reason : text };
  SlippageTooHigh : record { max : text; actual : text };
  PairNotFound : record { token_a : text; token_b : text };
  InsufficientLiquidity;
};
type TransferRecord = record { token : Token; block : nat; amount : nat };
type ValidationError = variant {
  DataInconsistency : record { reason : text };
  RapidChangeDetected : record { field : text; change_ratio : text };
  SupplyOutOfBounds : record { max : text; supply : text };
  PriceOutOfBounds : record { max : text; min : text; price : text };
  InvalidSnapshot : record { reason : text };
};
service : () -> {
  burn_icpx : (nat) -> (Result);
  complete_mint : (text) -> (Result_1);
  get_icpx_supply : () -> (Result_1);
  get_icpx_supply_cached : () -> (Result_1) query;
  get_portfolio_breakdown : () -> (Result_2);
  get_portfolio_display : () -> (PortfolioDisplay) query;
  get_portfolio_value : () -> (Result_1);
  get_target_allocations : () -> (Result_3);
  health_check : () -> (HealthStatus) query;
  initiate_mint : (nat) -> (Result_4);
  pause_canister : () -> (Result_5);
  perform_rebalance : () -> (Result_4);
  resume_canister : () -> (Result_5);
  set_admin : (principal) -> (Result_5);
}
