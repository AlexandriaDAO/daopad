type Account = record {
  id : text;
  configs_request_policy : opt RequestPolicyRule;
  metadata : vec AssetMetadata;
  name : text;
  assets : vec AccountAsset;
  addresses : vec AccountAddress;
  transfer_request_policy : opt RequestPolicyRule;
  last_modification_timestamp : text;
};
type AccountAddress = record { address : text; format : text };
type AccountAsset = record { balance : opt AccountBalance; asset_id : text };
type AccountAssetInfo = record {
  account_id : text;
  assets : vec AssetBalanceInfo;
  account_name : text;
};
type AccountBalance = record {
  account_id : text;
  decimals : nat32;
  balance : nat;
  last_update_timestamp : text;
  query_state : text;
  asset_id : text;
};
type AccountCallerPrivileges = record {
  id : text;
  can_transfer : bool;
  can_edit : bool;
};
type AccountWithAssets = record {
  assets : vec AssetWithBalance;
  account : Account;
};
type AddAddressBookEntryOperationInput = record {
  metadata : vec AssetMetadata;
  labels : vec text;
  blockchain : text;
  address : text;
  address_format : text;
  address_owner : text;
};
type AddAssetInput = record {
  decimals : nat32;
  standards : vec text;
  metadata : vec AssetMetadata;
  name : text;
  blockchain : text;
  symbol : text;
};
type AddressBookEntry = record {
  id : text;
  metadata : vec AssetMetadata;
  labels : vec text;
  blockchain : text;
  address : text;
  last_modification_timestamp : text;
  address_format : text;
  address_owner : text;
};
type AddressBookEntryCallerPrivileges = record {
  id : text;
  can_delete : bool;
  can_edit : bool;
};
type AgreementSnapshot = record {
  updated_at : nat64;
  token_id : principal;
  data : text;
  created_at : nat64;
  version : nat32;
  station_id : principal;
};
type AllVotingPowersResponse = record {
  total_holders : nat32;
  entries : vec VotingPowerEntry;
  total_voting_power : nat64;
};
type Allow = record {
  user_groups : vec text;
  auth_scope : AuthScope;
  users : vec text;
};
type Asset = record {
  id : text;
  decimals : nat32;
  standards : vec text;
  metadata : vec AssetMetadata;
  name : text;
  blockchain : text;
  symbol : text;
};
type AssetBalanceInfo = record {
  decimals : nat32;
  balance : nat64;
  asset_id : text;
  balance_formatted : text;
  symbol : text;
};
type AssetBalanceInfo_1 = record {
  decimals : nat32;
  balance : text;
  balance_formatted : text;
  symbol : text;
};
type AssetMetadata = record { key : text; value : text };
type AssetWithBalance = record { balance : opt AccountBalance; asset : Asset };
type AuthScope = variant { Authenticated; Public; Restricted };
type BackendStatusCheck = record {
  backend_principal : principal;
  instructions : opt vec text;
  error : opt text;
  station_id : principal;
  is_member : bool;
};
type CanisterInstallMode = variant { reinstall; upgrade; install };
type CanisterSnapshot = record {
  total_size : nat64;
  taken_at_timestamp : text;
  snapshot_id : text;
};
type CanisterSnapshotsResult = variant {
  Ok : vec CanisterSnapshot;
  Err : Error;
};
type CanisterStatusResponse = record {
  status : text;
  memory_size : text;
  cycles : text;
  module_hash : opt text;
};
type ChangeExternalCanisterKind = variant {
  State : ExternalCanisterState;
  Upgrade : UpgradeExternalCanisterInput;
  Settings : ExternalCanisterSettingsInput;
  NativeSettings : NativeCanisterSettingsInput;
};
type ChangeExternalCanisterOperationInput = record {
  kind : ChangeExternalCanisterKind;
  external_canister_id : text;
};
type ChangeMetadata = variant {
  OverrideSpecifiedBy : vec AssetMetadata;
  RemoveKeys : vec text;
  ReplaceAllBy : vec AssetMetadata;
};
type CheckStatus = variant { Error; Fail; Pass; Warn };
type ConfigureExternalCanisterKind = variant {
  CallPermission : vec ExternalCanisterCallPermission;
  Permissions : ExternalCanisterPermissions;
  RequestPolicies : ExternalCanisterRequestPolicies;
};
type ConfigureExternalCanisterOperationInput = record {
  kind : ConfigureExternalCanisterKind;
  external_canister_id : text;
};
type CreateAccountConfig = record {
  configs_request_policy : opt RequestPolicyRule;
  read_permission : Allow;
  configs_permission : Allow;
  metadata : vec AssetMetadata;
  name : text;
  transfer_request_policy : opt RequestPolicyRule;
  asset_ids : vec text;
  transfer_permission : Allow;
};
type CreateAccountResponse = record {
  request_id : text;
  status : text;
  auto_approved : bool;
  error : opt text;
};
type CreateExternalCanisterKind = variant {
  AddExisting : record { canister_id : principal };
  CreateNew : CreateExternalCanisterOptions;
};
type CreateExternalCanisterOperationInput = record {
  permissions : ExternalCanisterPermissions;
  metadata : vec record { text; text };
  kind : CreateExternalCanisterKind;
  name : text;
  labels : vec text;
  description : opt text;
  request_policies : ExternalCanisterRequestPolicies;
};
type CreateExternalCanisterOptions = record {
  initial_cycles : opt nat;
  subnet_selection : opt SubnetSelection;
};
type CreateRequestInput = record {
  title : opt text;
  execution_plan : opt RequestExecutionPlan;
  summary : opt text;
  operation : RequestOperationInput;
};
type CycleObtainStrategy = variant {
  Disabled;
  MintFromNativeToken : record { account_id : text; account_name : opt text };
  WithdrawFromCyclesLedger : record {
    account_id : text;
    account_name : opt text;
  };
};
type DaoOverviewStats = record {
  treasury_total_icp : nat64;
  treasury_account_count : nat64;
  active_proposal_count : nat64;
  recent_proposal_count : nat64;
  station_id : opt principal;
  member_count : nat64;
  station_name : opt text;
};
type DisasterRecovery = record {
  user_group_name : opt text;
  committee : DisasterRecoveryCommittee;
};
type DisasterRecoveryCommittee = record {
  user_group_id : text;
  quorum : nat16;
};
type EditAddressBookEntryOperationInput = record {
  labels : opt vec text;
  change_metadata : opt ChangeMetadata;
  address_book_entry_id : text;
  address_owner : opt text;
};
type EnhancedSecurityDashboard = record {
  overall_status : text;
  risk_summary : text;
  station_id : principal;
  checks : vec SecurityCheck;
  last_checked : nat64;
  recommended_actions : vec text;
  critical_issues : vec SecurityCheck;
  decentralization_score : nat8;
};
type Error = record {
  code : text;
  message : opt text;
  details : opt vec record { text; text };
};
type ExternalCanister = record {
  id : text;
  permissions : ExternalCanisterPermissions;
  modified_at : opt text;
  metadata : vec record { text; text };
  name : text;
  labels : vec text;
  canister_id : principal;
  description : opt text;
  created_at : text;
  request_policies : ExternalCanisterRequestPolicies;
  state : ExternalCanisterState;
  monitoring : opt MonitoringConfig;
};
type ExternalCanisterAction = variant {
  Call : ExternalCanisterSpecifier;
  Fund : ExternalCanisterSpecifier;
  List;
  Read : ExternalCanisterSpecifier;
  Configure : ExternalCanisterSpecifier;
  Monitor : ExternalCanisterSpecifier;
  Create;
  Change : ExternalCanisterSpecifier;
  Snapshot : ExternalCanisterSpecifier;
};
type ExternalCanisterCallPermission = record {
  execution_method : text;
  allow : Allow;
  validation_method : ExternalCanisterValidationMethodType;
};
type ExternalCanisterCallerMethodCallInput = record {
  arg : opt blob;
  validation_method : opt ExternalCanisterValidationMethodInput;
  cycles : opt nat;
  method_name : text;
};
type ExternalCanisterCallerPrivileges = record {
  id : text;
  can_change : bool;
  canister_id : principal;
  can_call : vec text;
  can_fund : bool;
};
type ExternalCanisterPermissions = record {
  calls : vec ExternalCanisterCallPermission;
  read : Allow;
  change : Allow;
};
type ExternalCanisterQuorumValidationMethod = record { min_approvers : nat16 };
type ExternalCanisterRequestPolicies = record {
  calls : vec RequestPolicyWithAccount;
  change : vec RequestPolicyWithAccount;
};
type ExternalCanisterSettingsInput = record {
  metadata : opt vec record { text; text };
  name : opt text;
  labels : opt vec text;
  description : opt text;
};
type ExternalCanisterSpecifier = variant {
  Id : text;
  Any;
  Canister : principal;
};
type ExternalCanisterState = variant { Active; Archived };
type ExternalCanisterValidationMethodInput = record {
  arg : opt blob;
  method_name : text;
};
type ExternalCanisterValidationMethodType = variant {
  No;
  Quorum : ExternalCanisterQuorumValidationMethod;
};
type FundExternalCanisterKind = variant {
  Send : FundExternalCanisterSendCyclesInput;
};
type FundExternalCanisterOperationInput = record {
  kind : FundExternalCanisterKind;
  external_canister_id : text;
};
type FundExternalCanisterSendCyclesInput = record { cycles : nat };
type GetAddressBookEntryInput = record { address_book_entry_id : text };
type GetAddressBookEntryResult = variant {
  Ok : record {
    privileges : AddressBookEntryCallerPrivileges;
    address_book_entry : AddressBookEntry;
  };
  Err : Error;
};
type GetExternalCanisterResult = variant {
  Ok : record {
    privileges : ExternalCanisterCallerPrivileges;
    canister : ExternalCanister;
  };
  Err : Error;
};
type GovernanceStats = record {
  active_proposals : nat64;
  rejected_proposals : nat64;
  average_participation : nat32;
  configured_thresholds : opt VotingThresholds;
  approved_proposals : nat64;
  total_proposals : nat64;
};
type IdListSpecifier = variant { Any; Ids : vec text };
type ListAccountsResult = variant {
  Ok : record {
    total : nat64;
    privileges : vec AccountCallerPrivileges;
    accounts : vec Account;
    next_offset : opt nat64;
  };
  Err : Error;
};
type ListAddressBookEntriesInput = record {
  ids : opt vec text;
  address_formats : opt vec text;
  labels : opt vec text;
  blockchain : opt text;
  addresses : opt vec text;
  paginate : opt PaginationInput;
  search_term : opt text;
};
type ListAddressBookEntriesResponse = record {
  total : nat64;
  privileges : vec AddressBookEntryCallerPrivileges;
  address_book_entries : vec AddressBookEntry;
  next_offset : opt nat64;
};
type ListAddressBookEntriesResult = variant {
  Ok : ListAddressBookEntriesResponse;
  Err : Error;
};
type ListAssetsResult = variant {
  Ok : record { assets : vec Asset };
  Err : Error;
};
type ListExternalCanistersInput = record {
  sort_by : opt ListExternalCanistersSortInput;
  states : opt vec ExternalCanisterState;
  canister_ids : opt vec principal;
  labels : opt vec text;
  paginate : opt PaginationInput;
};
type ListExternalCanistersResult = variant {
  Ok : record {
    total : nat64;
    privileges : vec ExternalCanisterCallerPrivileges;
    canisters : vec ExternalCanister;
    next_offset : opt nat64;
  };
  Err : Error;
};
type ListExternalCanistersSortInput = record {
  field : text;
  direction : SortDirection;
};
type ListOrbitRequestsResponse = record {
  total : nat64;
  requests : vec OrbitRequestSummary;
  next_offset : opt nat64;
};
type ListRequestsInput = record {
  sort_by : opt ListRequestsSortBy;
  deduplication_keys : opt vec text;
  with_evaluation_results : bool;
  expiration_from_dt : opt text;
  tags : opt vec text;
  created_to_dt : opt text;
  statuses : opt vec RequestStatusCode;
  approver_ids : opt vec text;
  expiration_to_dt : opt text;
  paginate : opt PaginationInput_1;
  requester_ids : opt vec text;
  operation_types : opt vec ListRequestsOperationType;
  only_approvable : bool;
  created_from_dt : opt text;
};
type ListRequestsOperationType = variant {
  RemoveAsset;
  AddUserGroup;
  EditPermission;
  SnapshotExternalCanister : opt principal;
  PruneExternalCanister : opt principal;
  EditNamedRule;
  ConfigureExternalCanister : opt principal;
  ChangeExternalCanister : opt principal;
  MonitorExternalCanister : opt principal;
  AddUser;
  EditAsset;
  EditUserGroup;
  SetDisasterRecovery;
  EditRequestPolicy;
  RemoveRequestPolicy;
  AddAsset;
  SystemUpgrade;
  RemoveAddressBookEntry;
  SystemRestore;
  CreateExternalCanister;
  EditAddressBookEntry;
  FundExternalCanister : opt principal;
  EditUser;
  ManageSystemInfo;
  Transfer : opt text;
  EditAccount;
  AddAddressBookEntry;
  AddRequestPolicy;
  RemoveNamedRule;
  RemoveUserGroup;
  CallExternalCanister : opt principal;
  AddNamedRule;
  RestoreExternalCanister : opt principal;
  AddAccount;
};
type ListRequestsSortBy = variant {
  ExpirationDt : SortDirection;
  LastModificationDt : SortDirection;
  CreatedAt : SortDirection;
};
type LogVisibility = variant { controllers; public };
type MonitorExternalCanisterKind = variant { Start : MonitoringConfig; Stop };
type MonitorExternalCanisterOperationInput = record {
  kind : MonitorExternalCanisterKind;
  external_canister_id : text;
};
type MonitoringConfig = record {
  strategy : MonitoringStrategy;
  funding_amount : nat;
};
type MonitoringStrategy = variant {
  Always;
  BelowThreshold : record { min_cycles : nat };
  BelowEstimatedRuntime : record { runtime_seconds : nat64 };
};
type NativeCanisterSettingsInput = record {
  freezing_threshold : opt nat;
  controllers : opt vec principal;
  reserved_cycles_limit : opt nat;
  log_visibility : opt LogVisibility;
  wasm_memory_limit : opt nat;
  memory_allocation : opt nat;
  compute_allocation : opt nat;
};
type NotificationAction = variant {
  List;
  Read;
  MarkRead;
  Delete;
  Create;
  Update;
};
type OrbitApprovalSummary = record {
  status : text;
  status_detail : opt text;
  approver_id : text;
  decided_at : text;
};
type OrbitLinkProposal = record {
  id : nat64;
  status : ProposalStatus;
  yes_votes : nat64;
  voters : vec principal;
  created_at : nat64;
  token_canister_id : principal;
  station_id : principal;
  proposer : principal;
  total_voting_power : nat64;
  no_votes : nat64;
  expires_at : nat64;
};
type OrbitRequestProposal = record {
  id : nat64;
  status : ProposalStatus_1;
  request_type : OrbitRequestType;
  yes_votes : nat64;
  created_at : nat64;
  token_canister_id : principal;
  orbit_request_id : text;
  proposer : principal;
  voter_count : nat32;
  total_voting_power : nat64;
  no_votes : nat64;
  expires_at : nat64;
};
type OrbitRequestSummary = record {
  id : text;
  status : text;
  status_detail : opt text;
  title : text;
  expiration_dt : text;
  created_at : text;
  requested_by : text;
  summary : opt text;
  operation : opt text;
  requester_name : opt text;
  approvals : vec OrbitApprovalSummary;
};
type OrbitRequestType = variant {
  RemoveAsset;
  AddUserGroup;
  EditPermission;
  SnapshotExternalCanister;
  PruneExternalCanister;
  EditNamedRule;
  ConfigureExternalCanister;
  ChangeExternalCanister;
  MonitorExternalCanister;
  AddUser;
  EditAsset;
  EditUserGroup;
  SetDisasterRecovery;
  EditRequestPolicy;
  RemoveRequestPolicy;
  AddAsset;
  SystemUpgrade;
  RemoveAddressBookEntry;
  SystemRestore;
  CreateExternalCanister;
  EditAddressBookEntry;
  FundExternalCanister;
  EditUser;
  ManageSystemInfo;
  Transfer;
  EditAccount;
  AddAddressBookEntry;
  RemoveUser;
  Other : text;
  AddRequestPolicy;
  RemoveNamedRule;
  RemoveUserGroup;
  CallExternalCanister;
  AddNamedRule;
  RestoreExternalCanister;
  AddAccount;
};
type PaginationInput = record { offset : opt nat64; limit : opt nat64 };
type PaginationInput_1 = record { offset : opt nat64; limit : opt nat16 };
type Permission = record { resource : Resource; allow : Allow };
type PermissionAction = variant { Read; Update };
type ProposalConfig = record {
  voting_period_seconds : nat64;
  execution_delay_seconds : nat64;
  required_threshold : nat32;
  proposal_type : ProposalType_1;
};
type ProposalError = variant {
  AlreadyVoted : nat64;
  InvalidTransferDetails : text;
  NotActive;
  NotFound : nat64;
  Custom : text;
  NoStationLinked : principal;
  IcCallFailed : record { code : int32; message : text };
  OrbitError : record { code : text; message : text; details : opt text };
  ActiveProposalExists;
  InsufficientVotingPowerToPropose : record {
    required : nat64;
    current : nat64;
  };
  ZeroVotingPower;
  NoVotingPower;
  Expired;
  AuthRequired;
};
type ProposalStatus = variant { Active; Approved; Rejected; Expired };
type ProposalStatus_1 = variant { Active; Rejected; Executed; Expired };
type ProposalType = variant { Transfer; OrbitRequest : OrbitRequestType };
type ProposalType_1 = variant {
  RemoveMember;
  ChangePermissions;
  AddMember;
  SystemUpgrade;
  GeneralOperation;
  TransferFunds;
};
type PruneExternalCanisterOperationInput = record {
  snapshot_ids : vec text;
  external_canister_id : text;
};
type Quorum = record { min_approved : nat16; approvers : UserSpecifier };
type RelatedPermission = record {
  groups : vec text;
  resource_type : text;
  resource_id : opt text;
};
type RemoveAddressBookEntryOperationInput = record {
  address_book_entry_id : text;
};
type RequestAction = variant { List; Read : ResourceSpecifier };
type RequestAdditionalInfoDTO = record { id : text; requester_name : text };
type RequestCallerPrivilegesDTO = record { id : text; can_approve : bool };
type RequestDTO = record { id : text; status : RequestStatusDTO; title : text };
type RequestExecutionPlan = variant {
  Immediate;
  Scheduled : record { execution_time : text };
};
type RequestOperationInput = variant {
  RemoveAddressBookEntry : RemoveAddressBookEntryOperationInput;
  EditAddressBookEntry : EditAddressBookEntryOperationInput;
  AddAddressBookEntry : AddAddressBookEntryOperationInput;
};
type RequestPoliciesDetails = record {
  auto_approved_count : nat64;
  bypass_count : nat64;
  total_count : nat64;
  policies : vec RequestPolicyInfo;
};
type RequestPolicyInfo = record {
  rule : RequestPolicyRule;
  specifier : RequestSpecifier;
  operation : text;
  approval_rule : text;
};
type RequestPolicyRule = variant {
  Not : RequestPolicyRule;
  Quorum : Quorum;
  AllowListed;
  QuorumPercentage : Quorum;
  AutoApproved;
  AllOf : vec RequestPolicyRule;
  AnyOf : vec RequestPolicyRule;
  AllowListedByMetadata : AssetMetadata;
  NamedRule : text;
};
type RequestPolicyWithAccount = record {
  rule : RequestPolicyRule;
  policy_id : opt text;
};
type RequestSpecifier = variant {
  RemoveAsset : ResourceSpecifier;
  AddUserGroup;
  EditPermission : ResourceSpecifier;
  EditNamedRule : ResourceSpecifier;
  ChangeExternalCanister : ResourceSpecifier;
  AddUser;
  EditAsset : ResourceSpecifier;
  EditUserGroup : ResourceSpecifier;
  SetDisasterRecovery;
  EditRequestPolicy : ResourceSpecifier;
  RemoveRequestPolicy : ResourceSpecifier;
  AddAsset;
  SystemUpgrade;
  RemoveAddressBookEntry : ResourceSpecifier;
  CreateExternalCanister;
  EditAddressBookEntry : ResourceSpecifier;
  FundExternalCanister : ResourceSpecifier;
  ChangeCanister;
  EditUser : ResourceSpecifier;
  ManageSystemInfo;
  Transfer : IdListSpecifier;
  EditAccount : IdListSpecifier;
  AddAddressBookEntry;
  RemoveUser;
  RemoveAccount;
  AddRequestPolicy;
  RemoveNamedRule : ResourceSpecifier;
  RemoveUserGroup : ResourceSpecifier;
  CallExternalCanister : principal;
  AddNamedRule;
  AddAccount;
};
type RequestStatusCode = variant {
  Failed;
  Approved;
  Rejected;
  Scheduled;
  Cancelled;
  Processing;
  Created;
  Completed;
};
type RequestStatusDTO = variant {
  Failed : record { reason : opt text };
  Approved;
  Rejected;
  Scheduled : record { scheduled_at : text };
  Cancelled : record { reason : opt text };
  Processing : record { started_at : text };
  Created;
  Completed : record { completed_at : text };
};
type Resource = variant {
  Request : RequestAction;
  Notification : NotificationAction;
  System : SystemAction;
  User : UserAction;
  ExternalCanister : ExternalCanisterAction;
  Account : ResourceAction;
  AddressBook : ResourceAction;
  Asset : ResourceAction;
  NamedRule : ResourceAction;
  UserGroup : ResourceAction;
  Permission : PermissionAction;
  RequestPolicy : ResourceAction;
};
type ResourceAction = variant {
  List;
  Read : ResourceSpecifier;
  Remove : ResourceSpecifier;
  Delete : ResourceSpecifier;
  Create;
  Transfer : ResourceSpecifier;
  Update : ResourceSpecifier;
};
type ResourceSpecifier = variant { Id : text; Any };
type RestoreExternalCanisterOperationInput = record {
  external_canister_id : text;
  snapshot_id : text;
};
type Result = variant { Ok : text; Err : text };
type Result_1 = variant { Ok : SubmitRequestResult; Err : text };
type Result_10 = variant { Ok : AccountAssetInfo; Err : text };
type Result_11 = variant { Ok : AccountWithAssets; Err : text };
type Result_12 = variant { Ok : AgreementSnapshot; Err : text };
type Result_13 = variant { Ok : AllVotingPowersResponse; Err : text };
type Result_14 = variant { Ok : CanisterSnapshotsResult; Err : text };
type Result_15 = variant { Ok : CanisterStatusResponse; Err : text };
type Result_16 = variant { Ok : DaoOverviewStats; Err : text };
type Result_17 = variant { Ok : GovernanceStats; Err : text };
type Result_18 = variant { Ok : vec principal; Err : text };
type Result_19 = variant { Ok : vec TokenInfo; Err : text };
type Result_2 = variant { Ok : vec SecurityCheck; Err : text };
type Result_20 = variant { Ok : nat64; Err : text };
type Result_21 = variant { Ok : GetExternalCanisterResult; Err : text };
type Result_22 = variant { Ok : vec SimpleRequest; Err : text };
type Result_23 = variant { Ok : SystemInfoResponse; Err : text };
type Result_24 = variant { Ok : ProposalConfig; Err : text };
type Result_25 = variant { Ok : RequestPoliciesDetails; Err : text };
type Result_26 = variant { Ok : Permission; Err : text };
type Result_27 = variant { Ok : Account; Err : text };
type Result_28 = variant { Ok : vec Account; Err : text };
type Result_29 = variant { Ok : TreasuryManagementData; Err : text };
type Result_3 = variant { Ok : BackendStatusCheck; Err : text };
type Result_30 = variant { Ok : vec OrbitRequestSummary; Err : text };
type Result_31 = variant { Ok : VotingThresholds; Err : text };
type Result_32 = variant { Ok : bool; Err : text };
type Result_33 = variant { Ok : ListAccountsResult; Err : text };
type Result_34 = variant { Ok : ListExternalCanistersResult; Err : text };
type Result_35 = variant { Ok : ListOrbitRequestsResponse; Err : text };
type Result_36 = variant { Ok : vec UserDTO; Err : text };
type Result_37 = variant { Ok : vec Asset; Err : text };
type Result_38 = variant { Ok : vec Permission; Err : text };
type Result_39 = variant { Ok : vec UserGroup; Err : text };
type Result_4 = variant { Ok : nat32; Err : text };
type Result_40 = variant { Ok : EnhancedSecurityDashboard; Err : text };
type Result_41 = variant { Ok; Err : text };
type Result_42 = variant { Ok; Err : ProposalError };
type Result_5 = variant { Ok : vec text; Err : text };
type Result_6 = variant { Ok : CreateAccountResponse; Err : text };
type Result_7 = variant { Ok : nat64; Err : ProposalError };
type Result_8 = variant { Ok : nat64; Err : text };
type Result_9 = variant { Ok : vec opt AccountBalance; Err : text };
type SecurityCheck = record {
  status : CheckStatus;
  related_permissions : opt vec RelatedPermission;
  name : text;
  message : text;
  details : opt text;
  category : text;
  severity : opt Severity;
  recommendation : opt text;
};
type Severity = variant { Low; High; Medium; None; Critical };
type SimpleRequest = record { id : text; status : text; title : text };
type SnapshotExternalCanisterOperationInput = record {
  force : bool;
  external_canister_id : text;
};
type SortDirection = variant { Asc; Desc };
type SubmitRequestResponse = record {
  privileges : RequestCallerPrivilegesDTO;
  request : RequestDTO;
  additional_info : RequestAdditionalInfoDTO;
};
type SubmitRequestResult = variant { Ok : SubmitRequestResponse; Err : Error };
type SubnetSelection = variant { Subnet : record { subnet_id : principal } };
type SystemAction = variant {
  Upgrade;
  Restore;
  ManageSystemInfo;
  SystemInfo;
  Capabilities;
};
type SystemInfo = record {
  disaster_recovery : opt DisasterRecovery;
  upgrader_cycles : opt nat64;
  name : text;
  last_upgrade_timestamp : text;
  raw_rand_successful : bool;
  version : text;
  cycles : nat64;
  upgrader_id : principal;
  cycle_obtain_strategy : CycleObtainStrategy;
};
type SystemInfoResponse = record {
  system_info : SystemInfo;
  station_id : principal;
};
type TokenInfo = record { chain : text; canister_id : text; symbol : text };
type TransferDetails = record {
  to : text;
  title : text;
  from_account_id : text;
  memo : opt text;
  description : text;
  amount : nat;
  from_asset_id : text;
};
type TreasuryAccountDetails = record {
  account_id : text;
  can_transfer : bool;
  assets : vec AssetBalanceInfo_1;
  config_policy : text;
  transfer_policy : text;
  addresses : vec AccountAddress;
  can_edit : bool;
  account_name : text;
};
type TreasuryAddressBookEntry = record {
  id : text;
  name : text;
  blockchain : text;
  address : text;
  purpose : opt text;
};
type TreasuryManagementData = record {
  address_book : vec TreasuryAddressBookEntry;
  accounts : vec TreasuryAccountDetails;
  backend_privileges_summary : text;
};
type TreasuryProposal = record {
  id : nat64;
  status : ProposalStatus_1;
  yes_votes : nat64;
  created_at : nat64;
  token_canister_id : principal;
  orbit_request_id : text;
  proposer : principal;
  voter_count : nat32;
  total_voting_power : nat64;
  no_votes : nat64;
  expires_at : nat64;
  proposal_type : ProposalType;
};
type UpgradeExternalCanisterInput = record {
  arg : opt blob;
  wasm_module : blob;
  mode : CanisterInstallMode;
};
type UserAction = variant {
  List;
  Read : ResourceSpecifier;
  Create;
  Update : ResourceSpecifier;
};
type UserDTO = record {
  id : text;
  status : UserStatus;
  groups : vec UserGroup;
  name : text;
  last_modification_timestamp : text;
  identities : vec principal;
};
type UserGroup = record { id : text; name : text };
type UserSpecifier = variant { Id : vec text; Any; Group : vec text };
type UserStatus = variant { Inactive; Active };
type VoteChoice = variant { No; Yes };
type VotingPowerEntry = record {
  user_principal : principal;
  kong_locker_principal : principal;
  voting_power : nat64;
  equity_percentage : float64;
};
type VotingThresholds = record {
  transfer_funds : nat32;
  change_permissions : nat32;
  remove_members : nat32;
  system_upgrades : nat32;
  add_members : nat32;
};
service : () -> {
  add_treasury_asset : (principal, AddAssetInput) -> (Result);
  call_orbit_canister_method_request : (
      principal,
      text,
      ExternalCanisterCallerMethodCallInput,
      text,
      opt text,
    ) -> (Result_1);
  change_orbit_canister_request : (
      principal,
      ChangeExternalCanisterOperationInput,
      text,
      opt text,
    ) -> (Result_1);
  // Check if treasury accounts have AutoApproved transfer policies
  // This is CRITICAL for DAOPad liquid democracy to work
  check_account_autoapproved_status : (principal) -> (Result_2);
  // Check addressbook injection with allowlisted policies
  check_addressbook_injection : (principal) -> (Result_2);
  // Check admin control layer: admin count, backend admin status, operator group size
  check_admin_control : (principal) -> (Result_2);
  // Check asset management: asset create/update/delete permissions
  check_asset_management : (principal) -> (Result_2);
  check_backend_status : (principal) -> (Result_3);
  // Check controller manipulation: NativeSettings controller changes
  check_controller_manipulation : (principal) -> (Result_2);
  // Check external canister call permissions
  check_external_canister_calls : (principal) -> (Result_2);
  // Check external canister control: create, change, fund permissions
  check_external_canisters : (principal) -> (Result_2);
  // Check governance permissions: who can change permissions, policies, users, groups
  check_governance_permissions : (principal) -> (Result_2);
  // Check monitoring cycle drain
  check_monitoring_drain : (principal) -> (Result_2);
  // Check named rule bypass
  check_named_rule_bypass : (principal) -> (Result_2);
  // Check operational permissions: request visibility, notifications, etc.
  check_operational_permissions : (principal) -> (Result_2);
  // Check proposal policies: auto-approvals, bypasses, quorum settings
  check_proposal_policies : (principal) -> (Result_2);
  // Check remove operations
  check_remove_operations : (principal) -> (Result_2);
  // Check snapshot operations
  check_snapshot_operations : (principal) -> (Result_2);
  // Check system configuration: upgrade access, disaster recovery, system info management
  check_system_configuration : (principal) -> (Result_2);
  // Check system restore permissions
  check_system_restore : (principal) -> (Result_2);
  // Check treasury control: account transfers, asset management, treasury permissions
  check_treasury_control : (principal) -> (Result_2);
  cleanup_expired_proposals : () -> (Result_4);
  configure_orbit_canister_request : (
      principal,
      ConfigureExternalCanisterOperationInput,
      text,
      opt text,
    ) -> (Result_1);
  create_address_book_request : (CreateRequestInput) -> (SubmitRequestResult);
  // Create EditAccount requests to set AutoApproved for all accounts
  // 
  // IMPORTANT: Backend cannot approve these requests (separation of duties).
  // After calling this, manually approve requests in Orbit UI.
  // 
  // Workflow:
  // 1. Call this function to create EditAccount requests
  // 2. Open Orbit Station UI → Requests tab
  // 3. Approve each "Enable AutoApproved" request
  // 4. Verify accounts show AutoApproved policies
  // 
  // This is a one-time bootstrap process to enable autonomous DAOPad operations.
  create_autoapprove_all_accounts : (principal) -> (Result_5);
  // Create edit permission request
  // 
  // Creates a request in Orbit Station to modify a permission's access control.
  // Note: This creates a REQUEST, not an immediate change. The request must be
  // approved according to the station's request policies.
  // 
  // Returns the request ID if successful.
  create_edit_permission_request : (
      principal,
      Resource,
      opt AuthScope,
      opt vec text,
      opt vec text,
    ) -> (Result);
  create_orbit_canister_request : (
      principal,
      CreateExternalCanisterOperationInput,
      text,
      opt text,
    ) -> (Result_1);
  create_orbit_treasury_account : (principal, text, opt text) -> (Result);
  // Create EditUser request to remove user from admin group
  // Request goes through DAO voting system before execution
  create_remove_admin_request : (principal, text, text) -> (Result);
  // Convenience method: Remove admin from multiple users in one call
  create_remove_multiple_admins_request : (
      principal,
      vec record { text; text },
    ) -> (vec Result);
  create_transfer_request : (
      text,
      text,
      text,
      nat,
      text,
      text,
      opt text,
      principal,
    ) -> (Result);
  create_treasury_account : (principal, CreateAccountConfig) -> (Result_6);
  // Create a treasury transfer proposal
  // 
  // This creates:
  // 1. An Orbit request (in pending state)
  // 2. A DAOPad proposal for voting
  // 
  // Users vote on the DAOPad proposal, and when threshold is reached,
  // the backend approves the Orbit request.
  create_treasury_transfer_proposal : (principal, TransferDetails) -> (
      Result_7,
    );
  edit_treasury_asset : (principal, text, opt text, opt vec AssetMetadata) -> (
      Result,
    );
  // Ensure a proposal exists for an Orbit request
  // NOTE: This is a NO-OP - we don't store proposals, Orbit does!
  // The admin canister handles vote tracking when users vote
  ensure_proposal_for_request : (principal, text, OrbitRequestType) -> (
      Result_7,
    );
  // Auto-create proposals for multiple requests (bulk operation)
  // Used by list_orbit_requests to ensure all requests have proposals
  ensure_proposals_for_requests : (principal, vec record { text; text }) -> (
      vec Result_8,
    );
  fetch_orbit_account_balances : (principal, vec text) -> (Result_9);
  fund_orbit_canister_request : (
      principal,
      FundExternalCanisterOperationInput,
      text,
      opt text,
    ) -> (Result_1);
  get_account_assets : (principal, text) -> (Result_10);
  get_account_with_assets : (principal, text) -> (Result_11);
  get_active_proposal_for_token : (principal) -> (opt OrbitLinkProposal) query;
  get_address_book_entry : (GetAddressBookEntryInput) -> (
      GetAddressBookEntryResult,
    ) query;
  get_agreement_by_station : (principal) -> (Result_12) query;
  get_agreement_snapshot : (principal) -> (Result_12) query;
  // Get all voting powers for a token with equity percentages
  // 
  // Returns list of all Kong Locker holders with their voting power and equity percentage.
  // Only includes users with voting_power > 0.
  get_all_voting_powers_for_token : (principal) -> (Result_13);
  get_available_assets : (principal) -> (ListAssetsResult);
  get_backend_principal : () -> (principal) query;
  // Get snapshots for a canister managed by Orbit Station
  // 
  // This method proxies to Orbit Station's canister_snapshots API,
  // which returns up to 10 snapshots per canister.
  // 
  // Security: Validates principals and that the token is registered before
  // making inter-canister calls.
  get_canister_snapshots : (principal, principal) -> (Result_14);
  get_canister_status : (principal) -> (Result_15);
  // Get comprehensive DAO overview stats
  // Backend acts as admin proxy to query protected Orbit data
  get_dao_overview : (principal) -> (Result_16);
  get_default_voting_thresholds : () -> (VotingThresholds) query;
  get_governance_stats : (principal) -> (Result_17) query;
  get_high_vp_members : (principal, nat64) -> (Result_18);
  get_kong_locker_factory_principal : () -> (principal) query;
  get_my_kong_locker_canister : () -> (opt principal) query;
  get_my_locked_tokens : () -> (Result_19);
  get_my_voting_power_for_token : (principal) -> (Result_20);
  get_orbit_canister : (principal, principal) -> (Result_21);
  get_orbit_request_proposal : (principal, text) -> (
      opt OrbitRequestProposal,
    ) query;
  // EXPERIMENTAL: Ultra-simple request fetching - returns basic info only
  get_orbit_requests_simple : () -> (Result_22);
  get_orbit_station_for_token : (principal) -> (opt principal) query;
  get_orbit_system_info : (principal) -> (Result_23);
  get_proposal_config : (principal, ProposalType) -> (Result_24) query;
  // Get detailed request policies information with resolved rule names
  // 
  // Returns all request policies with human-readable operation names and approval rules
  get_request_policies_details : (principal) -> (Result_25);
  // Get specific permission details
  // 
  // Fetches a single permission by resource type from Orbit Station.
  get_station_permission : (principal, Resource) -> (Result_26);
  // Get total voting power for a token across all Kong Locker users
  // 
  // This sums up the voting power of all registered users for a specific token.
  // Used by frontend to show user's VP as a percentage of total.
  get_total_voting_power_for_token : (principal) -> (Result_20);
  get_transfer_requests : (principal) -> (Result_5);
  // Get single account with all assets and fresh balances
  // 
  // Fetches account details from Orbit Station and ensures all asset balances are fresh.
  // If any balances are null or stale, calls fetch_account_balances to refresh them.
  get_treasury_account_details : (principal, text) -> (Result_27);
  // List all treasury accounts with complete asset and balance data
  // 
  // Returns all accounts in the station with their assets and fresh balances.
  // This is the primary method for the Treasury Tab to fetch multi-asset data.
  get_treasury_accounts_with_balances : (principal) -> (Result_28);
  // Get comprehensive treasury management data for Operating Agreement Article V
  // 
  // This method aggregates:
  // - All treasury accounts with balances and policies
  // - Address book entries (authorized recipients)
  // - Backend privilege summary
  get_treasury_management_data : (principal) -> (Result_29);
  // NOTE: Treasury proposals are stored in Orbit Station, not backend
  get_treasury_proposal : (principal) -> (opt TreasuryProposal) query;
  get_user_pending_requests : (principal, principal) -> (Result_30);
  // Get the user's vote on an Orbit request (for UI display)
  // NOTE: Vote tracking happens in admin canister, not backend
  get_user_vote_on_orbit_request : (principal, principal, text) -> (
      opt VoteChoice,
    ) query;
  get_voting_thresholds : (principal) -> (Result_31) query;
  has_proposal_passed : (principal, ProposalType, nat64, nat64, nat64) -> (
      Result_32,
    ) query;
  // Check if a user has voted on an Orbit request proposal
  // NOTE: Vote tracking happens in admin canister, not backend
  has_user_voted_on_orbit_request : (principal, principal, text) -> (
      bool,
    ) query;
  health_check : () -> (text) query;
  initialize_default_thresholds : (principal) -> (Result);
  list_active_proposals : () -> (vec OrbitLinkProposal) query;
  list_address_book_entries : (ListAddressBookEntriesInput) -> (
      ListAddressBookEntriesResult,
    ) query;
  list_all_kong_locker_registrations : () -> (
      vec record { principal; principal },
    ) query;
  list_all_orbit_stations : () -> (vec record { principal; principal }) query;
  list_orbit_accounts : (principal, opt text, opt nat64, opt nat64) -> (
      Result_33,
    );
  list_orbit_canisters : (principal, ListExternalCanistersInput) -> (Result_34);
  // List all active proposals for a token
  // NOTE: Proposals are stored in Orbit Station, not backend
  list_orbit_request_proposals : (principal) -> (
      vec OrbitRequestProposal,
    ) query;
  // List all requests from Orbit Station with domain filtering
  // 
  // This method acts as an admin proxy, allowing DAOPad to query
  // all requests regardless of user permissions.
  list_orbit_requests : (principal, ListRequestsInput) -> (Result_35);
  // List all users in Orbit Station with their groups
  // Backend acts as admin proxy to query protected data
  list_orbit_users : (principal) -> (Result_36);
  list_station_assets : (principal) -> (Result_37);
  // List all permissions for a station (admin proxy)
  // 
  // Since Orbit restricts permission queries to admin users only, this backend method
  // acts as an admin proxy to fetch permissions on behalf of frontend users.
  list_station_permissions : (principal, opt vec Resource) -> (Result_38);
  // List all user groups in a station (admin proxy)
  // 
  // Fetches the complete list of user groups including Admin, Operator, and custom groups.
  // Frontend uses this to map UUIDs to human-readable names in permissions display.
  // 
  // Since Orbit restricts user group queries to admin users only, this backend method
  // acts as an admin proxy to fetch user groups on behalf of frontend users.
  list_station_user_groups : (principal) -> (Result_39);
  list_treasury_assets : (principal) -> (Result_37);
  monitor_orbit_canister_request : (
      principal,
      MonitorExternalCanisterOperationInput,
      text,
      opt text,
    ) -> (Result_1);
  // Perform all security checks in one call
  // 
  // This is a convenience method that calls all 17 individual security check methods
  // and combines their results into a single response. This is useful for:
  // - Getting a complete security overview in one call
  // - Frontend components that need all checks at once
  // - Simplifying frontend code by providing a single endpoint
  perform_all_security_checks : (principal) -> (Result_2);
  // Perform comprehensive security analysis and return dashboard with score
  // 
  // This is the public-facing endpoint that frontend calls.
  // It combines perform_all_security_checks + build_dashboard to return
  // the full EnhancedSecurityDashboard with decentralization score.
  perform_security_check : (principal) -> (Result_40);
  propose_orbit_station_link : (principal, principal) -> (Result_20);
  prune_orbit_canister_snapshots_request : (
      principal,
      PruneExternalCanisterOperationInput,
      text,
      opt text,
    ) -> (Result_1);
  regenerate_agreement_snapshot : (principal, principal) -> (Result_12);
  register_with_kong_locker : (principal) -> (Result);
  remove_treasury_asset : (principal, text) -> (Result);
  restore_orbit_canister_request : (
      principal,
      RestoreExternalCanisterOperationInput,
      text,
      opt text,
    ) -> (Result_1);
  set_voting_thresholds : (principal, VotingThresholds) -> (Result);
  snapshot_orbit_canister_request : (
      principal,
      SnapshotExternalCanisterOperationInput,
      text,
      opt text,
    ) -> (Result_1);
  unregister_kong_locker : () -> (Result);
  validate_account_name : (principal, text) -> (Result_32);
  vote_on_orbit_proposal : (nat64, bool) -> (Result_41);
  // Vote on ANY Orbit request (not just treasury transfers)
  // NOTE: Voting is handled by admin canister, not backend
  vote_on_orbit_request : (principal, text, bool) -> (Result_42);
  // Vote on a treasury proposal
  // 
  // When threshold is reached, executes immediately by approving the Orbit request.
  // Follows the same pattern as orbit_link.rs vote_on_proposal.
  vote_on_treasury_proposal : (nat64, bool) -> (Result_42);
}
