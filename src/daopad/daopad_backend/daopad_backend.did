type Account = record {
  id : text;
  configs_request_policy : opt RequestPolicyRule;
  metadata : vec AccountMetadata;
  name : text;
  assets : vec AccountAsset;
  addresses : vec AccountAddress;
  transfer_request_policy : opt RequestPolicyRule;
  last_modification_timestamp : text;
};
type AccountAddress = record { address : text; format : text };
type AccountAsset = record { balance : opt AccountBalance; asset_id : text };
type AccountBalance = record {
  account_id : text;
  decimals : nat32;
  balance : nat;
  last_update_timestamp : text;
  query_state : text;
  asset_id : text;
};
type AccountCallerPrivileges = record {
  id : text;
  can_transfer : bool;
  can_edit : bool;
};
type AccountMetadata = record { key : text; value : text };
type AddAddressBookEntryOperationInput = record {
  metadata : vec AccountMetadata;
  labels : vec text;
  blockchain : text;
  address : text;
  address_format : text;
  address_owner : text;
};
type AddressBookEntry = record {
  id : text;
  metadata : vec AccountMetadata;
  labels : vec text;
  blockchain : text;
  address : text;
  last_modification_timestamp : text;
  address_format : text;
  address_owner : text;
};
type AddressBookEntryCallerPrivileges = record {
  id : text;
  can_delete : bool;
  can_edit : bool;
};
type AddressBookRequest = record { id : text; status : text; title : text };
type AdminCount = record {
  human_admins : nat32;
  total : nat32;
  admin_list : vec AdminInfo;
  daopad_backend : nat32;
};
type AdminInfo = record {
  id : text;
  status : text;
  name : text;
  is_daopad_backend : bool;
  identities : vec principal;
};
type Allow = record {
  user_groups : vec text;
  auth_scope : AuthScope;
  users : vec text;
};
type Asset = record {
  id : text;
  decimals : nat32;
  metadata : vec AccountMetadata;
  name : text;
  blockchain : text;
  standard : text;
  symbol : text;
};
type AuthScope = variant { Authenticated; Public; Restricted };
type BackendStatusCheck = record {
  backend_principal : principal;
  instructions : opt vec text;
  error : opt text;
  station_id : principal;
  is_member : bool;
};
type CanisterInstallMode = variant { reinstall; upgrade; install };
type CanisterStatusResponse = record {
  status : text;
  memory_size : text;
  cycles : text;
  module_hash : opt text;
};
type ChangeExternalCanisterKind = variant {
  State : ExternalCanisterState;
  Upgrade : UpgradeExternalCanisterInput;
  Settings : ExternalCanisterSettingsInput;
  NativeSettings : NativeCanisterSettingsInput;
};
type ChangeExternalCanisterOperationInput = record {
  kind : ChangeExternalCanisterKind;
  external_canister_id : text;
};
type ChangeMetadata = variant {
  OverrideSpecifiedBy : vec AccountMetadata;
  RemoveKeys : vec text;
  ReplaceAllBy : vec AccountMetadata;
};
type CheckStatus = variant { Error; Fail; Pass; Warn };
type ConfigureExternalCanisterKind = variant {
  CallPermission : vec ExternalCanisterCallPermission;
  Permissions : ExternalCanisterPermissions;
  RequestPolicies : ExternalCanisterRequestPolicies;
};
type ConfigureExternalCanisterOperationInput = record {
  kind : ConfigureExternalCanisterKind;
  external_canister_id : text;
};
type CreateAccountConfig = record {
  configs_request_policy : opt RequestPolicyRule;
  read_permission : Allow;
  configs_permission : Allow;
  metadata : vec AccountMetadata;
  name : text;
  transfer_request_policy : opt RequestPolicyRule;
  asset_ids : vec text;
  transfer_permission : Allow;
};
type CreateAccountResponse = record {
  request_id : text;
  status : text;
  auto_approved : bool;
  error : opt text;
};
type CreateExternalCanisterKind = variant {
  AddExisting : record { canister_id : principal };
  CreateNew : CreateExternalCanisterOptions;
};
type CreateExternalCanisterOperationInput = record {
  permissions : ExternalCanisterPermissions;
  metadata : vec record { text; text };
  kind : CreateExternalCanisterKind;
  name : text;
  labels : vec text;
  description : opt text;
  request_policies : ExternalCanisterRequestPolicies;
};
type CreateExternalCanisterOptions = record {
  initial_cycles : opt nat;
  subnet_selection : opt SubnetSelection;
};
type CreateRequestInput = record {
  title : opt text;
  execution_plan : opt RequestExecutionPlan;
  summary : opt text;
  operation : RequestOperationInput;
};
type CreateRequestResult = variant {
  Ok : record { request : AddressBookRequest };
  Err : Error;
};
type CycleObtainStrategy = variant {
  Disabled;
  MintFromNativeToken : record { account_id : text; account_name : opt text };
  WithdrawFromCyclesLedger : record {
    account_id : text;
    account_name : opt text;
  };
};
type DisasterRecovery = record {
  user_group_name : opt text;
  committee : DisasterRecoveryCommittee;
};
type DisasterRecoveryCommittee = record {
  user_group_id : text;
  quorum : nat16;
};
type EditAddressBookEntryOperationInput = record {
  labels : opt vec text;
  change_metadata : opt ChangeMetadata;
  address_book_entry_id : text;
  address_owner : opt text;
};
type Error = record {
  code : text;
  message : opt text;
  details : opt vec record { text; text };
};
type ExternalCanister = record {
  id : text;
  permissions : ExternalCanisterPermissions;
  modified_at : opt text;
  metadata : vec record { text; text };
  name : text;
  labels : vec text;
  canister_id : principal;
  description : opt text;
  created_at : text;
  request_policies : ExternalCanisterRequestPolicies;
  state : ExternalCanisterState;
  monitoring : opt MonitoringConfig;
};
type ExternalCanisterAction = variant {
  Fund : ResourceSpecifier;
  List;
  Read : ResourceSpecifier;
  Create;
  Change : ResourceSpecifier;
};
type ExternalCanisterCallPermission = record {
  execution_method : text;
  allow : Allow;
  validation_method : ExternalCanisterValidationMethodType;
};
type ExternalCanisterCallerMethodCallInput = record {
  arg : opt blob;
  validation_method : opt ExternalCanisterValidationMethodInput;
  cycles : opt nat;
  method_name : text;
};
type ExternalCanisterCallerPrivileges = record {
  id : text;
  can_change : bool;
  canister_id : principal;
  can_call : vec text;
  can_fund : bool;
};
type ExternalCanisterPermissions = record {
  calls : vec ExternalCanisterCallPermission;
  read : Allow;
  change : Allow;
};
type ExternalCanisterQuorumValidationMethod = record { min_approvers : nat16 };
type ExternalCanisterRequestPolicies = record {
  calls : vec RequestPolicyWithAccount;
  change : vec RequestPolicyWithAccount;
};
type ExternalCanisterSettingsInput = record {
  metadata : opt vec record { text; text };
  name : opt text;
  labels : opt vec text;
  description : opt text;
};
type ExternalCanisterState = variant { Active; Archived };
type ExternalCanisterValidationMethodInput = record {
  arg : opt blob;
  method_name : text;
};
type ExternalCanisterValidationMethodType = variant {
  No;
  Quorum : ExternalCanisterQuorumValidationMethod;
};
type FundExternalCanisterKind = variant {
  Send : FundExternalCanisterSendCyclesInput;
};
type FundExternalCanisterOperationInput = record {
  kind : FundExternalCanisterKind;
  external_canister_id : text;
};
type FundExternalCanisterSendCyclesInput = record { cycles : nat };
type GetAddressBookEntryInput = record { address_book_entry_id : text };
type GetAddressBookEntryResult = variant {
  Ok : record {
    privileges : AddressBookEntryCallerPrivileges;
    address_book_entry : AddressBookEntry;
  };
  Err : Error;
};
type GetExternalCanisterResult = record { canister : ExternalCanister };
type GetPermissionResponse = record {
  permission : Permission;
  privileges : PermissionCallerPrivileges;
};
type GovernanceStats = record {
  active_proposals : nat64;
  rejected_proposals : nat64;
  average_participation : nat32;
  configured_thresholds : opt VotingThresholds;
  approved_proposals : nat64;
  total_proposals : nat64;
};
type GroupIds = record { admin_group_id : text; operator_group_id : text };
type JoinMemberResponse = record {
  request_id : text;
  status : text;
  auto_approved : bool;
  failure_reason : opt text;
};
type ListAccountsResult = variant {
  Ok : record {
    total : nat64;
    privileges : vec AccountCallerPrivileges;
    accounts : vec Account;
    next_offset : opt nat64;
  };
  Err : Error;
};
type ListAddressBookEntriesInput = record {
  ids : opt vec text;
  address_formats : opt vec text;
  labels : opt vec text;
  blockchain : opt text;
  addresses : opt vec text;
  paginate : opt PaginationInput;
  search_term : opt text;
};
type ListAddressBookEntriesResponse = record {
  total : nat64;
  privileges : vec AddressBookEntryCallerPrivileges;
  address_book_entries : vec AddressBookEntry;
  next_offset : opt nat64;
};
type ListAddressBookEntriesResult = variant {
  Ok : ListAddressBookEntriesResponse;
  Err : Error;
};
type ListAssetsResult = variant {
  Ok : record { assets : vec Asset };
  Err : Error;
};
type ListExternalCanistersInput = record {
  sort_by : opt ListExternalCanistersSortInput;
  states : opt vec ExternalCanisterState;
  canister_ids : opt vec principal;
  labels : opt vec text;
  paginate : opt PaginationInput;
};
type ListExternalCanistersResult = variant {
  Ok : record {
    total : nat64;
    privileges : vec ExternalCanisterCallerPrivileges;
    canisters : vec ExternalCanister;
    next_offset : opt nat64;
  };
  Err : Error;
};
type ListExternalCanistersSortInput = record {
  field : text;
  direction : SortDirection;
};
type ListOrbitRequestsResponse = record {
  total : nat64;
  requests : vec OrbitRequestSummary;
  next_offset : opt nat64;
};
type ListPermissionsResponse = record {
  permissions : vec Permission;
  total : nat64;
  privileges : vec PermissionCallerPrivileges;
  user_groups : vec UserGroup;
};
type ListRequestsInput = record {
  sort_by : opt ListRequestsSortBy;
  deduplication_keys : opt vec text;
  with_evaluation_results : bool;
  expiration_from_dt : opt text;
  tags : opt vec text;
  created_to_dt : opt text;
  statuses : opt vec RequestStatusCode;
  approver_ids : opt vec text;
  expiration_to_dt : opt text;
  paginate : opt PaginationInput_1;
  requester_ids : opt vec text;
  operation_types : opt vec ListRequestsOperationType;
  only_approvable : bool;
  created_from_dt : opt text;
};
type ListRequestsOperationType = variant {
  RemoveAsset;
  AddUserGroup;
  EditPermission;
  SnapshotExternalCanister : opt principal;
  PruneExternalCanister : opt principal;
  EditNamedRule;
  ConfigureExternalCanister : opt principal;
  ChangeExternalCanister : opt principal;
  MonitorExternalCanister : opt principal;
  AddUser;
  EditAsset;
  EditUserGroup;
  SetDisasterRecovery;
  EditRequestPolicy;
  RemoveRequestPolicy;
  AddAsset;
  SystemUpgrade;
  RemoveAddressBookEntry;
  SystemRestore;
  CreateExternalCanister;
  EditAddressBookEntry;
  FundExternalCanister : opt principal;
  EditUser;
  ManageSystemInfo;
  Transfer : opt text;
  EditAccount;
  AddAddressBookEntry;
  AddRequestPolicy;
  RemoveNamedRule;
  RemoveUserGroup;
  CallExternalCanister : opt principal;
  AddNamedRule;
  RestoreExternalCanister : opt principal;
  AddAccount;
};
type ListRequestsSortBy = variant {
  ExpirationDt : SortDirection;
  LastModificationDt : SortDirection;
  CreatedAt : SortDirection;
};
type ListUserGroupsResponse = record {
  total : nat64;
  privileges : vec UserGroupCallerPrivileges;
  user_groups : vec UserGroup;
};
type LogVisibility = variant { controllers; public };
type MonitorExternalCanisterKind = variant { Start : MonitoringConfig; Stop };
type MonitorExternalCanisterOperationInput = record {
  kind : MonitorExternalCanisterKind;
  external_canister_id : text;
};
type MonitoringConfig = record {
  strategy : MonitoringStrategy;
  funding_amount : nat;
};
type MonitoringStrategy = variant {
  Always;
  BelowThreshold : record { min_cycles : nat };
  BelowEstimatedRuntime : record { runtime_seconds : nat64 };
};
type NativeCanisterSettingsInput = record {
  freezing_threshold : opt nat;
  controllers : opt vec principal;
  reserved_cycles_limit : opt nat;
  log_visibility : opt LogVisibility;
  wasm_memory_limit : opt nat;
  memory_allocation : opt nat;
  compute_allocation : opt nat;
};
type NotificationAction = variant {
  List;
  Read;
  MarkRead;
  Delete;
  Create;
  Update;
};
type OrbitApprovalSummary = record {
  status : text;
  status_detail : opt text;
  approver_id : text;
  decided_at : text;
};
type OrbitLinkProposal = record {
  id : nat64;
  status : ProposalStatus;
  yes_votes : nat64;
  voters : vec principal;
  created_at : nat64;
  token_canister_id : principal;
  station_id : principal;
  proposer : principal;
  total_voting_power : nat64;
  no_votes : nat64;
  expires_at : nat64;
};
type OrbitRequestSummary = record {
  id : text;
  status : text;
  status_detail : opt text;
  title : text;
  expiration_dt : text;
  created_at : text;
  requested_by : text;
  summary : opt text;
  requester_name : opt text;
  approvals : vec OrbitApprovalSummary;
};
type PaginationInput = record { offset : opt nat64; limit : opt nat64 };
type PaginationInput_1 = record { offset : opt nat64; limit : opt nat16 };
type Permission = record { resource : Resource; allow : Allow };
type PermissionAction = variant { Read; Update };
type PermissionCallerPrivileges = record {
  resource : Resource;
  can_edit : bool;
};
type PermissionStatus = record {
  user_name : text;
  groups : vec text;
  privileges : vec text;
  is_admin : bool;
  has_system_management : bool;
  user_id : text;
  has_user_management : bool;
};
type ProposalConfig = record {
  voting_period_seconds : nat64;
  execution_delay_seconds : nat64;
  required_threshold : nat32;
  proposal_type : ProposalType;
};
type ProposalStatus = variant { Active; Approved; Rejected; Expired };
type ProposalType = variant {
  RemoveMember;
  ChangePermissions;
  AddMember;
  SystemUpgrade;
  GeneralOperation;
  TransferFunds;
};
type PruneExternalCanisterOperationInput = record {
  snapshot_ids : vec text;
  external_canister_id : text;
};
type Quorum = record { min_approved : nat16; approvers : UserSpecifier };
type RemoveAddressBookEntryOperationInput = record {
  address_book_entry_id : text;
};
type RequestAction = variant { List; Read : ResourceSpecifier };
type RequestAdditionalInfoDTO = record { id : text; requester_name : text };
type RequestApprovalStatus = variant { Approved; Rejected };
type RequestCallerPrivilegesDTO = record { id : text; can_approve : bool };
type RequestDTO = record { id : text; status : RequestStatusDTO; title : text };
type RequestExecutionPlan = variant {
  Immediate;
  Scheduled : record { execution_time : text };
};
type RequestOperationInput = variant {
  RemoveAddressBookEntry : RemoveAddressBookEntryOperationInput;
  EditAddressBookEntry : EditAddressBookEntryOperationInput;
  AddAddressBookEntry : AddAddressBookEntryOperationInput;
};
type RequestPolicyRule = variant {
  Not : RequestPolicyRule;
  Quorum : Quorum;
  AllowListed;
  QuorumPercentage : Quorum;
  AutoApproved;
  AllOf : vec RequestPolicyRule;
  AnyOf : vec RequestPolicyRule;
  AllowListedByMetadata : AccountMetadata;
  NamedRule : text;
};
type RequestPolicyWithAccount = record {
  rule : RequestPolicyRule;
  policy_id : opt text;
};
type RequestStatusCode = variant {
  Failed;
  Approved;
  Rejected;
  Scheduled;
  Cancelled;
  Processing;
  Created;
  Completed;
};
type RequestStatusDTO = variant {
  Failed : record { reason : opt text };
  Approved;
  Rejected;
  Scheduled : record { scheduled_at : text };
  Cancelled : record { reason : opt text };
  Processing : record { started_at : text };
  Created;
  Completed : record { completed_at : text };
};
type Resource = variant {
  Request : RequestAction;
  Notification : NotificationAction;
  System : SystemAction;
  User : UserAction;
  ExternalCanister : ExternalCanisterAction;
  Account : ResourceAction;
  AddressBook : ResourceAction;
  Asset : ResourceAction;
  NamedRule : ResourceAction;
  UserGroup : ResourceAction;
  Permission : PermissionAction;
  RequestPolicy : ResourceAction;
};
type ResourceAction = variant {
  List;
  Read : ResourceSpecifier;
  Delete : ResourceSpecifier;
  Create;
  Transfer : ResourceSpecifier;
  Update : ResourceSpecifier;
};
type ResourceSpecifier = variant { Id : text; Any };
type RestoreExternalCanisterOperationInput = record {
  external_canister_id : text;
  snapshot_id : text;
};
type Result = variant { Ok : text; Err : text };
type Result_1 = variant { Ok; Err : text };
type Result_10 = variant { Ok : GovernanceStats; Err : text };
type Result_11 = variant { Ok : vec principal; Err : text };
type Result_12 = variant { Ok : vec TokenInfo; Err : text };
type Result_13 = variant { Ok : nat64; Err : text };
type Result_14 = variant { Ok : GetExternalCanisterResult; Err : text };
type Result_15 = variant { Ok : vec SimpleRequest; Err : text };
type Result_16 = variant { Ok : SystemInfoResponse; Err : text };
type Result_17 = variant { Ok : GetPermissionResponse; Err : text };
type Result_18 = variant { Ok : ProposalConfig; Err : text };
type Result_19 = variant { Ok : vec text; Err : text };
type Result_2 = variant { Ok : SubmitRequestResult; Err : text };
type Result_20 = variant { Ok : vec OrbitRequestSummary; Err : text };
type Result_21 = variant { Ok : VotingThresholds; Err : text };
type Result_22 = variant { Ok : bool; Err : text };
type Result_23 = variant { Ok : JoinMemberResponse; Err : text };
type Result_24 = variant { Ok : vec AdminInfo; Err : text };
type Result_25 = variant { Ok : ListAccountsResult; Err : text };
type Result_26 = variant { Ok : ListExternalCanistersResult; Err : text };
type Result_27 = variant { Ok : ListOrbitRequestsResponse; Err : text };
type Result_28 = variant { Ok : vec UserGroupInfo; Err : text };
type Result_29 = variant { Ok : vec UserInfo; Err : text };
type Result_3 = variant { Ok : BackendStatusCheck; Err : text };
type Result_30 = variant { Ok : ListPermissionsResponse; Err : text };
type Result_31 = variant { Ok : ListUserGroupsResponse; Err : text };
type Result_32 = variant { Ok : SecurityDashboard; Err : text };
type Result_33 = variant { Ok : PermissionStatus; Err : text };
type Result_4 = variant { Ok : nat32; Err : text };
type Result_5 = variant { Ok : CreateAccountResponse; Err : text };
type Result_6 = variant { Ok : vec opt AccountBalance; Err : text };
type Result_7 = variant { Ok : GroupIds; Err : text };
type Result_8 = variant { Ok : AdminCount; Err : text };
type Result_9 = variant { Ok : CanisterStatusResponse; Err : text };
type SecurityCheck = record {
  status : CheckStatus;
  name : text;
  message : text;
  details : opt text;
  category : text;
  severity : opt Severity;
  recommendation : opt text;
};
type SecurityDashboard = record {
  overall_status : text;
  station_id : principal;
  checks : vec SecurityCheck;
  last_checked : nat64;
};
type Severity = variant { Low; High; Medium; None; Critical };
type SimpleRequest = record { id : text; status : text; title : text };
type SnapshotExternalCanisterOperationInput = record {
  force : bool;
  external_canister_id : text;
};
type SortDirection = variant { Asc; Desc };
type SubmitRequestResponse = record {
  privileges : RequestCallerPrivilegesDTO;
  request : RequestDTO;
  additional_info : RequestAdditionalInfoDTO;
};
type SubmitRequestResult = variant { Ok : SubmitRequestResponse; Err : Error };
type SubnetSelection = variant { Subnet : record { subnet_id : principal } };
type SystemAction = variant {
  Upgrade;
  ManageSystemInfo;
  SystemInfo;
  Capabilities;
};
type SystemInfo = record {
  disaster_recovery : opt DisasterRecovery;
  upgrader_cycles : opt nat64;
  name : text;
  last_upgrade_timestamp : text;
  raw_rand_successful : bool;
  version : text;
  cycles : nat64;
  upgrader_id : principal;
  cycle_obtain_strategy : CycleObtainStrategy;
};
type SystemInfoResponse = record {
  system_info : SystemInfo;
  station_id : principal;
};
type TokenInfo = record { chain : text; canister_id : text; symbol : text };
type UpgradeExternalCanisterInput = record {
  arg : opt blob;
  wasm_module : blob;
  mode : CanisterInstallMode;
};
type UserAction = variant {
  List;
  Read : ResourceSpecifier;
  Create;
  Update : ResourceSpecifier;
};
type UserGroup = record { id : text; name : text };
type UserGroupCallerPrivileges = record {
  id : text;
  can_delete : bool;
  can_edit : bool;
};
type UserGroupInfo = record { id : text; name : text };
type UserInfo = record {
  id : text;
  status : text;
  groups : vec text;
  name : text;
  identities : vec principal;
};
type UserSpecifier = variant { Id : vec text; Any; Group : vec text };
type UserStatus = variant { Inactive; Active };
type VotingThresholds = record {
  transfer_funds : nat32;
  change_permissions : nat32;
  remove_members : nat32;
  system_upgrades : nat32;
  add_members : nat32;
};
service : () -> {
  add_user_to_orbit : (principal, principal, text, vec text, UserStatus) -> (
      Result,
    );
  approve_transfer_request : (text, principal) -> (Result_1);
  call_orbit_canister_method_request : (
      principal,
      text,
      ExternalCanisterCallerMethodCallInput,
      text,
      opt text,
    ) -> (Result_2);
  change_orbit_canister_request : (
      principal,
      ChangeExternalCanisterOperationInput,
      text,
      opt text,
    ) -> (Result_2);
  check_backend_status : (principal) -> (Result_3);
  cleanup_expired_proposals : () -> (Result_4);
  configure_orbit_canister_request : (
      principal,
      ConfigureExternalCanisterOperationInput,
      text,
      opt text,
    ) -> (Result_2);
  create_address_book_request : (CreateRequestInput) -> (CreateRequestResult);
  create_orbit_canister_request : (
      principal,
      CreateExternalCanisterOperationInput,
      text,
      opt text,
    ) -> (Result_2);
  create_orbit_treasury_account : (principal, text, opt text) -> (Result);
  create_transfer_request : (
      text,
      text,
      text,
      nat,
      text,
      text,
      opt text,
      principal,
    ) -> (Result);
  create_treasury_account : (principal, CreateAccountConfig) -> (Result_5);
  downgrade_to_operator : (principal, text) -> (Result);
  fetch_orbit_account_balances : (principal, vec text) -> (Result_6);
  fund_orbit_canister_request : (
      principal,
      FundExternalCanisterOperationInput,
      text,
      opt text,
    ) -> (Result_2);
  get_active_proposal_for_token : (principal) -> (opt OrbitLinkProposal) query;
  get_actual_group_ids : (principal) -> (Result_7);
  get_address_book_entry : (GetAddressBookEntryInput) -> (
      GetAddressBookEntryResult,
    ) query;
  get_admin_count : (principal) -> (Result_8);
  get_available_assets : (principal) -> (ListAssetsResult);
  get_backend_principal : () -> (principal) query;
  get_canister_status : (principal) -> (Result_9);
  get_default_voting_thresholds : () -> (VotingThresholds) query;
  get_governance_stats : (principal) -> (Result_10) query;
  get_high_vp_members : (principal, nat64) -> (Result_11);
  get_kong_locker_factory_principal : () -> (principal) query;
  get_my_kong_locker_canister : () -> (opt principal) query;
  get_my_locked_tokens : () -> (Result_12);
  get_my_voting_power_for_token : (principal) -> (Result_13);
  get_orbit_canister : (principal, principal) -> (Result_14);
  // Get a single request by ID (deprecated - kept for compatibility)
  get_orbit_request : (principal, text) -> (Result);
  // EXPERIMENTAL: Ultra-simple request fetching - returns basic info only
  get_orbit_requests_simple : () -> (Result_15);
  get_orbit_station_for_token : (principal) -> (opt principal) query;
  get_orbit_system_info : (principal) -> (Result_16);
  get_permission : (principal, Resource) -> (Result_17);
  get_predefined_groups : () -> (vec UserGroupInfo) query;
  get_proposal_config : (principal, ProposalType) -> (Result_18) query;
  get_transfer_requests : (principal) -> (Result_19);
  get_user_pending_requests : (principal, principal) -> (Result_20);
  get_voting_thresholds : (principal) -> (Result_21) query;
  grant_self_permissions : (principal) -> (Result);
  has_proposal_passed : (principal, ProposalType, nat64, nat64, nat64) -> (
      Result_22,
    ) query;
  health_check : () -> (text) query;
  initialize_default_thresholds : (principal) -> (Result);
  join_orbit_station : (principal, text) -> (Result_23);
  list_active_proposals : () -> (vec OrbitLinkProposal) query;
  list_address_book_entries : (ListAddressBookEntriesInput) -> (
      ListAddressBookEntriesResult,
    ) query;
  list_all_admins : (principal) -> (Result_24);
  list_all_kong_locker_registrations : () -> (
      vec record { principal; principal },
    ) query;
  list_all_orbit_stations : () -> (vec record { principal; principal }) query;
  list_orbit_accounts : (principal, opt text, opt nat64, opt nat64) -> (
      Result_25,
    );
  list_orbit_canisters : (principal, ListExternalCanistersInput) -> (Result_26);
  // List all requests from Orbit Station with domain filtering
  // 
  // This method acts as an admin proxy, allowing DAOPad to query
  // all requests regardless of user permissions.
  list_orbit_requests : (principal, ListRequestsInput) -> (Result_27);
  list_orbit_user_groups : (principal) -> (Result_28);
  list_orbit_users : (principal) -> (Result_29);
  list_permissions : (principal, opt vec Resource) -> (Result_30);
  list_user_groups : (principal, opt PaginationInput) -> (Result_31);
  monitor_orbit_canister_request : (
      principal,
      MonitorExternalCanisterOperationInput,
      text,
      opt text,
    ) -> (Result_2);
  perform_security_check : (principal) -> (Result_32);
  propose_orbit_station_link : (principal, principal) -> (Result_13);
  prune_orbit_canister_snapshots_request : (
      principal,
      PruneExternalCanisterOperationInput,
      text,
      opt text,
    ) -> (Result_2);
  register_with_kong_locker : (principal) -> (Result);
  remove_admin_role : (principal, text) -> (Result);
  remove_user_from_orbit : (principal, text) -> (Result);
  request_permission_change : (
      principal,
      Resource,
      opt AuthScope,
      opt vec text,
      opt vec text,
    ) -> (Result);
  restore_orbit_canister_request : (
      principal,
      RestoreExternalCanisterOperationInput,
      text,
      opt text,
    ) -> (Result_2);
  set_voting_thresholds : (principal, VotingThresholds) -> (Result);
  snapshot_orbit_canister_request : (
      principal,
      SnapshotExternalCanisterOperationInput,
      text,
      opt text,
    ) -> (Result_2);
  // Submit approval decision for a request
  submit_request_approval : (
      principal,
      text,
      RequestApprovalStatus,
      opt text,
    ) -> (Result_1);
  unregister_kong_locker : () -> (Result);
  validate_account_name : (principal, text) -> (Result_22);
  verify_permissions : (principal) -> (Result_33);
  verify_sole_admin : (principal) -> (Result_22);
  vote_on_orbit_proposal : (nat64, bool) -> (Result_1);
}
