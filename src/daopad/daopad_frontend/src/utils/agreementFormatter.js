/**
 * Generate Markdown version of operating agreement
 */
export const generateMarkdown = (agreementData, tokenSymbol) => {
  const formatDate = (timestamp) => {
    return new Date(Number(timestamp) / 1_000_000).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  };

  const date = formatDate(agreementData.generated_at);

  let md = `# OPERATING AGREEMENT\n\n`;
  md += `## ${agreementData.llc_name || `${tokenSymbol} Treasury DAO LLC`}\n\n`;
  md += `*A ${agreementData.jurisdiction || 'Wyoming'} Limited Liability Company*\n\n`;
  md += `Generated: ${date}\n\n`;
  md += `---\n\n`;

  // Article I
  md += `## Article I: Formation and Organization\n\n`;
  md += `This Operating Agreement (the "Agreement") of ${agreementData.llc_name || `${tokenSymbol} Treasury DAO LLC`} `;
  md += `(the "Company") is entered into and shall be effective as of ${date}.\n\n`;
  md += `The Company is organized as a Limited Liability Company pursuant to the laws of ${agreementData.jurisdiction || 'Wyoming'}.\n\n`;
  md += `**Orbit Station ID:** \`${agreementData.station_id}\`\n\n`;

  // Article II
  md += `## Article II: Members and Governance\n\n`;
  md += `### Section 2.1: Members\n\n`;
  md += `The Company has **${agreementData.total_members} member(s)** as of the date of this Agreement.\n\n`;

  md += `### Section 2.2: Administrative Control\n\n`;
  md += `The Company is governed by the following administrator(s):\n\n`;
  agreementData.admins.forEach(admin => {
    md += `- **${admin.name}**\n`;
    admin.identities.forEach(identity => {
      md += `  - Principal: \`${identity}\`\n`;
    });
  });
  md += `\n`;

  if (agreementData.is_truly_decentralized) {
    md += `✅ **True Decentralization:** The sole administrator is the DAOPad governance backend.\n\n`;
  } else {
    md += `⚠️ **Warning:** Multiple administrators exist. Security Score: ${agreementData.security_score}/100\n\n`;
  }

  // Article III
  md += `## Article III: Voting Rights and Governance Procedures\n\n`;
  md += `### Section 3.1: Voting Power\n\n`;
  md += `Voting Power = USD Value × 100\n\n`;

  md += `### Section 3.2: Operation Approval Thresholds\n\n`;
  [90, 75, 70, 60, 50, 40, 30].forEach(threshold => {
    const ops = agreementData.voting_thresholds.filter(vt => vt.threshold_percentage === threshold);
    if (ops.length > 0) {
      md += `#### ${threshold}% Approval Required:\n\n`;
      ops.forEach(op => {
        md += `- **${op.operation}** — ${op.voting_duration_hours}h voting period\n`;
        md += `  - *${op.rationale}*\n`;
      });
      md += `\n`;
    }
  });

  // Article IV
  md += `## Article IV: Request Policies and Approval Rules\n\n`;
  agreementData.request_policies.forEach(policy => {
    md += `### ${policy.operation} (${policy.risk_level} Risk)\n\n`;
    md += `${policy.description}\n\n`;
    md += `**Rule:** \`${policy.approval_rule}\`\n\n`;
  });

  // Article V
  md += `## Article V: Treasury and Asset Management\n\n`;
  md += `The Company maintains ${agreementData.accounts.length} treasury account(s):\n\n`;
  agreementData.accounts.forEach(account => {
    md += `- **${account.name}** (${account.blockchain} / ${account.standard})\n`;
  });
  md += `\n`;

  // Article VI
  md += `## Article VI: Security Posture and Compliance\n\n`;
  md += `**Security Score:** ${agreementData.security_score}/100 (${agreementData.security_status})\n\n`;
  md += `**Decentralization:** ${agreementData.is_truly_decentralized ? 'Fully Decentralized DAO' : 'Partially Centralized'}\n\n`;

  if (agreementData.critical_issues && agreementData.critical_issues.length > 0) {
    md += `### Critical Issues:\n\n`;
    agreementData.critical_issues.forEach(issue => {
      md += `- ${issue}\n`;
    });
    md += `\n`;
  }

  // Footer
  md += `---\n\n`;
  md += `*Generated by DAOPad v${agreementData.daopad_version} | ${date}*\n\n`;
  md += `*Station ID: ${agreementData.station_id}*\n`;

  return md;
};
