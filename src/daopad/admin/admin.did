type EquityProposalStatus = variant { Approved; Proposed; Executed; Expired };
type EquityTransferProposal = record {
  status : EquityProposalStatus;
  no_votes_pct : nat8;
  payment_destination : PaymentDestination;
  created_at : nat64;
  seller : principal;
  ckusdc_amount : nat64;
  proposal_id : text;
  station_id : principal;
  buyer : principal;
  expires_at : nat64;
  yes_votes_pct : nat8;
  percentage : nat8;
};
type OrbitOperationType = variant {
  RemoveAsset;
  AddUserGroup;
  EditPermission;
  SnapshotExternalCanister;
  PruneExternalCanister;
  EditNamedRule;
  ConfigureExternalCanister;
  ChangeExternalCanister;
  MonitorExternalCanister;
  AddUser;
  EditAsset;
  EditUserGroup;
  SetDisasterRecovery;
  EditRequestPolicy;
  RemoveRequestPolicy;
  AddAsset;
  SystemUpgrade;
  RemoveAddressBookEntry;
  SystemRestore;
  CreateExternalCanister;
  EditAddressBookEntry;
  FundExternalCanister;
  EditUser;
  ManageSystemInfo;
  Transfer;
  EditAccount;
  AddAddressBookEntry;
  RemoveUser;
  Other : text;
  AddRequestPolicy;
  RemoveNamedRule;
  RemoveUserGroup;
  CallExternalCanister;
  AddNamedRule;
  RestoreExternalCanister;
  AddAccount;
};
type PaymentDestination = variant {
  SellerAccount : text;
  StationTreasury : principal;
};
type ProposalError = variant {
  AlreadyVoted : nat64;
  InvalidTransferDetails : text;
  NotActive;
  NotFound : nat64;
  Custom : text;
  NoStationLinked : principal;
  IcCallFailed : record { code : int32; message : text };
  OrbitError : record { code : text; message : text; details : opt text };
  ActiveProposalExists;
  InsufficientVotingPowerToPropose : record {
    required : nat64;
    current : nat64;
  };
  ZeroVotingPower;
  NoVotingPower;
  Expired;
  AuthRequired;
};
type ProposalStatus = variant { Active; Rejected; Executed; Expired };
type Result = variant { Ok; Err : text };
type Result_1 = variant { Ok : text; Err : text };
type Result_2 = variant { Ok : nat64; Err : ProposalError };
type Result_3 = variant { Ok : VotingPowerResult; Err : text };
type Result_4 = variant { Ok; Err : ProposalError };
type TransferDetails = record {
  to : text;
  title : text;
  from_account_id : text;
  memo : opt text;
  description : text;
  amount : nat;
  from_asset_id : text;
};
type UnifiedProposal = record {
  id : nat64;
  status : ProposalStatus;
  yes_votes : nat64;
  operation_type : OrbitOperationType;
  created_at : nat64;
  token_canister_id : principal;
  orbit_request_id : text;
  proposer : principal;
  voter_count : nat32;
  total_voting_power : nat64;
  no_votes : nat64;
  expires_at : nat64;
  transfer_details : opt TransferDetails;
};
type VoteChoice = variant { No; Yes };
type VotingPowerResult = record {
  source : VotingPowerSource;
  voting_power : nat64;
};
type VotingPowerSource = variant { KongLocker; Equity };
service : () -> {
  cleanup_equity_data : (principal) -> (Result);
  create_equity_transfer_proposal : (
      principal,
      principal,
      nat8,
      nat64,
      PaymentDestination,
    ) -> (Result_1);
  // Ensure a proposal exists for an Orbit request
  ensure_proposal_for_request : (principal, text, text) -> (Result_2);
  execute_equity_transfer : (text) -> (Result);
  get_equity_holders : (principal) -> (vec record { principal; nat8 }) query;
  get_equity_transfer_proposal : (text) -> (opt EquityTransferProposal) query;
  get_equity_transfer_proposals : (principal) -> (
      vec EquityTransferProposal,
    ) query;
  // Get a specific proposal
  get_proposal : (principal, text) -> (opt UnifiedProposal) query;
  get_user_equity : (principal, principal) -> (nat8) query;
  // Get the user's vote on a proposal
  get_user_vote : (principal, principal, text) -> (opt VoteChoice) query;
  // Unified voting power query that routes by station type
  // - Equity stations: Returns equity % as VP
  // - Token stations: Returns Kong Locker VP
  // Note: Must be update (not query) because Kong Locker path uses cross-canister calls
  get_voting_power_display : (principal, principal) -> (Result_3);
  // Check if a user has voted on a proposal
  has_user_voted : (principal, principal, text) -> (bool) query;
  initialize_equity_station : (principal, principal) -> (Result);
  is_equity_station : (principal) -> (bool) query;
  // List all active proposals for a token
  list_unified_proposals : (principal) -> (vec UnifiedProposal) query;
  vote_on_equity_transfer : (text, bool) -> (Result);
  // Single voting endpoint for ALL Orbit operations
  vote_on_proposal : (principal, text, bool) -> (Result_4);
}
