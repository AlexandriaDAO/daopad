type Collateral = variant { ICP; ckUSDT };
type HttpHeader = record { value : text; name : text };
type HttpRequest = record {
  url : text;
  method : text;
  body : blob;
  headers : vec record { text; text };
};
type HttpResponse = record {
  body : blob;
  headers : vec record { text; text };
  upgrade : opt bool;
  status_code : nat16;
};
type HttpResponse_1 = record {
  status : nat;
  body : blob;
  headers : vec HttpHeader;
};
type Invoice = record {
  id : text;
  url : text;
  status : InvoiceStatus;
  fiat : nat64;
  collateral : Collateral;
  description : text;
  created_at : nat64;
  crypto : nat64;
  receiver : principal;
};
type InvoiceStatus = variant { Paid; Inactive; Unpaid };
type Result = variant { Ok : nat; Err : text };
type Result_1 = variant { Ok : text; Err : text };
type TransformArgs = record { context : blob; response : HttpResponse_1 };
service : () -> {
  create_invoice : (nat64, text, opt text, principal) -> (text);
  get_canister_ckusdt_balance : () -> (Result);
  get_canister_icp_balance : () -> (Result);
  get_ckusdt_balance : (principal) -> (Result);
  get_icp_balance : (principal) -> (Result);
  get_invoice_by_payment_id : (text) -> (
      opt record { principal; Invoice },
    ) query;
  get_invoices_for_principal_query : (principal) -> (vec Invoice) query;
  get_my_invoices : () -> (vec Invoice) query;
  get_stripe_api_secret_info : () -> (text) query;
  get_stripe_webhook_secret_info : () -> (text) query;
  health : () -> (text) query;
  http_request : (HttpRequest) -> (HttpResponse) query;
  http_request_update : (HttpRequest) -> (HttpResponse);
  list_all_invoices : () -> (vec record { principal; vec Invoice }) query;
  test_send_ckusdt : () -> (Result_1);
  transform_first : (TransformArgs) -> (HttpResponse) query;
  transform_second : (TransformArgs) -> (HttpResponse) query;
  update_stripe_api_secret : (text) -> (Result_1);
  update_stripe_webhook_secret : (text) -> (Result_1);
  whoami : () -> (text) query;
}
