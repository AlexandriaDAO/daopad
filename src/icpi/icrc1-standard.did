type Account = record { owner : principal; subaccount : opt blob };
type TransferArgs = record {
    from_subaccount : opt blob;
    to : Account;
    amount : nat;
    fee : opt nat;
    memo : opt blob;
    created_at_time : opt nat64;
};
type TransferError = variant {
    BadFee : record { expected_fee : nat };
    BadBurn : record { min_burn_amount : nat };
    InsufficientFunds : record { balance : nat };
    TooOld;
    CreatedInFuture : record { ledger_time : nat64 };
    Duplicate : record { duplicate_of : nat };
    TemporarilyUnavailable;
    GenericError : record { error_code : nat; message : text };
};

type Value = variant {
    Nat : nat;
    Int : int;
    Text : text;
    Blob : blob;
    Array : vec Value;
    Map : vec record { text; Value };
};

type InitArgs = record {
    token_name : text;
    token_symbol : text;
    minting_account : Account;
    initial_balances : vec record { Account; nat };
    metadata : vec record { text; Value };
    transfer_fee : nat;
    archive_options : record {
        trigger_threshold : nat;
        num_blocks_to_archive : nat;
        controller_id : principal;
        cycles_for_archive_creation : opt nat;
    };
    feature_flags : opt record { icrc2 : bool; icrc3 : bool };
    maximum_number_of_accounts : opt nat;
    accounts_overflow_trim_quantity : opt nat;
    max_memo_length : opt nat16;
};

type LedgerArg = variant {
    Init : InitArgs;
    Upgrade : null;
};

service : (LedgerArg) -> {
    icrc1_name : () -> (text) query;
    icrc1_symbol : () -> (text) query;
    icrc1_decimals : () -> (nat8) query;
    icrc1_metadata : () -> (vec record { text; Value }) query;
    icrc1_total_supply : () -> (nat) query;
    icrc1_fee : () -> (nat) query;
    icrc1_minting_account : () -> (opt Account) query;
    icrc1_balance_of : (Account) -> (nat) query;
    icrc1_transfer : (TransferArgs) -> (variant { Ok : nat; Err : TransferError });
    icrc1_supported_standards : () -> (vec record { name : text; url : text }) query;
}